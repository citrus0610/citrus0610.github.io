<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode 80. Remove Duplicates from Sorted Array II - 解題紀錄</title>
    <link href="/LeetCode-80-Remove-Duplicates-from-Sorted-Array-II-%E8%A7%A3%E9%A1%8C%E7%B4%80%E9%8C%84/"/>
    <url>/LeetCode-80-Remove-Duplicates-from-Sorted-Array-II-%E8%A7%A3%E9%A1%8C%E7%B4%80%E9%8C%84/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>連結：<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii">https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii</a><br>難度：Medium</p><p>承上一題 <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array">https://leetcode.com/problems/remove-duplicates-from-sorted-array</a><br>給定一個已經由小到大排序的 array<br>要你移除重複的元素，使得每個元素最多出現 2 次<br>並且只能 in-place 修改原始的 array<br>不能用額外的記憶體空間存</p><p>最後只需要回傳 k<br>新的 array 不用回傳，只要修改原始的 array<br>k 代表修改後的 array 前 k 個元素符合題目要求<br>而第 k 個之後的元素不用管</p><h2 id="解法1：雙指標-index-從-1-開始"><a href="#解法1：雙指標-index-從-1-開始" class="headerlink" title="解法1：雙指標 (index 從 1 開始)"></a>解法1：雙指標 (index 從 1 開始)</h2><p>跟前一題差不多 (<a href="https://citrus0610.github.io/LeetCode-26-Remove-Duplicates-from-Sorted-Array-%E8%A7%A3%E9%A1%8C%E7%B4%80%E9%8C%84/">解題文章</a>)<br>也是維護 index i 和 k<br>差別在於，要多判斷最多能連續兩個相同的值<br>原本是只有 <code>nums[i]</code> 和 <code>nums[i-1]</code> 不相等時才會覆寫值<br>現在要變成相等時也會覆寫值，但最多只連續 2 次<br>因此多一個 <code>cnt</code> 變數紀錄次數<br>當 <code>nums[i]</code> 和 <code>nums[i-1]</code> 不相等時，<code>cnt</code> 歸零重新計數</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> n<br><br>        k = <span class="hljs-number">1</span><br>        cnt = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">if</span> nums[i] != nums[i-<span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">if</span> k != i:<br>                    nums[k] = nums[i]<br>                k += <span class="hljs-number">1</span><br>                cnt = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">elif</span> nums[i] == nums[i-<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> cnt &lt; <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span> k != i:<br>                    nums[k] = nums[i]<br>                k += <span class="hljs-number">1</span><br>                cnt += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> k<br></code></pre></td></tr></table></figure><p>Runtime：78ms - Beats 89.32%</p><p>寫法可以更精簡<br>把判斷覆寫和計數的部份獨立分開<br>就不用多寫一層重複的 if</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> n<br><br>        k = <span class="hljs-number">1</span><br>        cnt = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>            cnt = cnt + <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> nums[i] == nums[i-<span class="hljs-number">1</span>] <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> cnt &lt; <span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">if</span> k != i: <span class="hljs-comment"># 可不寫</span><br>                    nums[k] = nums[i]<br>                k += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> k<br></code></pre></td></tr></table></figure><p>Runtime：78ms - Beats 89.32%</p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p>由於 <code>if (k != i)</code> 可不寫<br>寫法能更精簡，將 <code>k += 1</code> 寫成 <code>k++</code> 放進 index 裡<br>C++ 中多餘的賦值，代價是很低的，而 python 會比較高</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> n;<br><br>        <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>, cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            cnt = (nums[i] == nums[i<span class="hljs-number">-1</span>])? cnt + <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (cnt &lt; <span class="hljs-number">2</span>)<br>                nums[k++] = nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> k;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Runtime：3ms - Beats 96.09%</p><h2 id="解法2：雙指標-index-從-2-開始"><a href="#解法2：雙指標-index-從-2-開始" class="headerlink" title="解法2：雙指標 (index 從 2 開始)"></a>解法2：雙指標 (index 從 2 開始)</h2><p>改成從 2 開始<br>並直接判斷位置 i 和 k-2 的值相不相同<br>就可確保最多只有連續 2 個相同值<br>是個比較神奇但更簡單的方法</p><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> n<br><br>        k = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n):<br>            <span class="hljs-keyword">if</span> nums[i] != nums[k-<span class="hljs-number">2</span>]:<br>                <span class="hljs-keyword">if</span> k != i: <span class="hljs-comment"># 可不寫</span><br>                    nums[k] = nums[i]<br>                k += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> k<br></code></pre></td></tr></table></figure><p>Runtime：68ms - Beats 99.16%</p><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> n;<br><br>        <span class="hljs-type">int</span> k = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)<br>            <span class="hljs-keyword">if</span> (nums[i] != nums[k<span class="hljs-number">-2</span>])<br>                nums[k++] = nums[i];<br>        <span class="hljs-keyword">return</span> k;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Runtime：3ms - Beats 96.09%</p>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Two Pointers</tag>
      
      <tag>Array</tag>
      
      <tag>Python</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 26. Remove Duplicates from Sorted Array - 解題紀錄</title>
    <link href="/LeetCode-26-Remove-Duplicates-from-Sorted-Array-%E8%A7%A3%E9%A1%8C%E7%B4%80%E9%8C%84/"/>
    <url>/LeetCode-26-Remove-Duplicates-from-Sorted-Array-%E8%A7%A3%E9%A1%8C%E7%B4%80%E9%8C%84/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>連結：<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array">https://leetcode.com/problems/remove-duplicates-from-sorted-array</a><br>難度：Easy</p><p>給定一個已經由小到大排序的 array<br>要你移除重複的元素，使得每個元素只出現一次<br>並且只能 in-place 修改原始的 array<br>不能用額外的記憶體空間存</p><p>最後只需要回傳 k<br>新的 array 不用回傳，只要修改原始的 array<br>k 代表修改後的 array 前 k 個元素符合題目要求<br>而第 k 個之後的元素不用管</p><h2 id="解法：雙指標"><a href="#解法：雙指標" class="headerlink" title="解法：雙指標"></a>解法：雙指標</h2><p>維護 2 個 index<br>i：遍歷所有元素<br>k：要覆寫的位置<br>i 和 k 從 1 開始<br>當 <code>nums[i]</code> 與 <code>nums[i-1]</code> 不相等時<br>將 <code>nums[k]</code> 賦值為 <code>nums[i]</code>，並遞增 k<br>k 與 i 相同時，不需要賦值，這個可寫可不寫，不影響</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeDuplicates</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        k = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[i] != nums[i-<span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">if</span> k != i: <span class="hljs-comment"># 可不寫</span><br>                    nums[k] = nums[i]<br>                k += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> k<br></code></pre></td></tr></table></figure><p>Runtime：0ms - Beats 100%</p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p>由於 <code>if (k != i)</code> 可不寫<br>寫法能更精簡，將 <code>k += 1</code> 寫成 <code>k++</code> 放進 index 裡<br>而 C++ 中多餘的賦值，代價是很低的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)<br>            <span class="hljs-keyword">if</span> (nums[i] != nums[i<span class="hljs-number">-1</span>])<br>                nums[k++] = nums[i];<br>        <span class="hljs-keyword">return</span> k;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Runtime：0ms - Beats 100%</p>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Two Pointers</tag>
      
      <tag>Array</tag>
      
      <tag>Python</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 82. Remove Duplicates from Sorted List II - 解題紀錄</title>
    <link href="/LeetCode-82-Remove-Duplicates-from-Sorted-List-II-%E8%A7%A3%E9%A1%8C%E7%B4%80%E9%8C%84/"/>
    <url>/LeetCode-82-Remove-Duplicates-from-Sorted-List-II-%E8%A7%A3%E9%A1%8C%E7%B4%80%E9%8C%84/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>連結：<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii">https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii</a><br>難度：Medium</p><p>承上一題 <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list">https://leetcode.com/problems/remove-duplicates-from-sorted-list</a><br>給定一個已排序好的 linked list<br>除了移除重複的 node 以外，還要移除 node 本身<br>也就是移除所有含有重複值的 node，只留下沒有重複的 node</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>遍歷 node 時，若遇到當前 node 的值與下一個 node 相同<br>則一直往後走，直到 node 的值與下一個 node 不同<br>這部份用一個第二層的 while 迴圈即可<br>接著判斷 pre_node 需不需要往後接</p><p>然後會發現如果一開始 head 是重複值的話就會錯<br>因此 pre_node 需要用一個 dummy<br>並將 dummy 的 next 初始化為 head<br>遍歷 node 時，從 dummy.next 開始走<br>而最後回傳的 head 則變為 dummy.next</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deleteDuplicates</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        dummy = ListNode(<span class="hljs-built_in">next</span>=head)<br>        pre_node = dummy<br>        node = dummy.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">while</span> node:<br>            <span class="hljs-keyword">while</span> node.<span class="hljs-built_in">next</span> <span class="hljs-keyword">and</span> node.val == node.<span class="hljs-built_in">next</span>.val:<br>                node = node.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> pre_node.<span class="hljs-built_in">next</span> != node:<br>                pre_node.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                pre_node = node<br>            node = node.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><p>Runtime：0ms - Beats 100%</p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>, head);<br>        ListNode* pre_node = dummy;<br>        ListNode* node = head;<br>        <span class="hljs-keyword">while</span> (node) &#123;<br>            <span class="hljs-keyword">while</span> (node-&gt;next &amp;&amp; node-&gt;val == node-&gt;next-&gt;val)<br>                node = node-&gt;next;<br>            <span class="hljs-keyword">if</span> (pre_node-&gt;next != node)<br>                pre_node-&gt;next = node-&gt;next;<br>            <span class="hljs-keyword">else</span><br>                pre_node = node;<br>            node = node-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Runtime：0ms - Beats 100%</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><p><a href="https://shannonhung.github.io/posts/leetcode-82-remove-duplicates-from-sorted-list-ll/">https://shannonhung.github.io/posts/leetcode-82-remove-duplicates-from-sorted-list-ll/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
      <tag>C++</tag>
      
      <tag>Linked-List</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode 83. Remove Duplicates from Sorted List - 解題紀錄</title>
    <link href="/LeetCode-83-Remove-Duplicates-from-Sorted-List-%E8%A7%A3%E9%A1%8C%E7%B4%80%E9%8C%84/"/>
    <url>/LeetCode-83-Remove-Duplicates-from-Sorted-List-%E8%A7%A3%E9%A1%8C%E7%B4%80%E9%8C%84/</url>
    
    <content type="html"><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>連結：<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list">https://leetcode.com/problems/remove-duplicates-from-sorted-list</a><br>難度：Easy</p><p>給定一個已排序好的 linked list<br>要你移除重複的 node，使得每個值只出現一次</p><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><p>遍歷 node，若當前 node 的值與前一個 node 的值相同<br>將前一個 node 的 next 指向當前 node 的下一個 node</p><p>需要注意的是，pre_node 的值必須初始化為特殊值<br>不能只有 <code>pre_node = ListNode()</code>，初始值會是 0<br>題目給定的 node 的值有可能為 0，這樣會錯</p><h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deleteDuplicates</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        node = head<br>        pre_node = ListNode(<span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">while</span> node:<br>            <span class="hljs-keyword">if</span> node.val == pre_node.val:<br>                pre_node.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                pre_node = node<br>            node = node.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> head<br></code></pre></td></tr></table></figure><p>Runtime：0ms - Beats 100%</p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* node = head;<br>        ListNode* pre_node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(INT_MIN);<br>        <span class="hljs-keyword">while</span> (node) &#123;<br>            <span class="hljs-keyword">if</span> (node-&gt;val == pre_node-&gt;val)<br>                pre_node-&gt;next = node-&gt;next;<br>            <span class="hljs-keyword">else</span><br>                pre_node = node;<br>            node = node-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Runtime：0ms - Beats 100%</p><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><p>遍歷 node，若當前 node 的值與下一個 node 的值相同<br>將當前 node 的 next 指向下下一個 node<br>比解法1簡單，不需要紀錄 pre_node</p><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deleteDuplicates</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        node = head<br>        <span class="hljs-keyword">while</span> node <span class="hljs-keyword">and</span> node.<span class="hljs-built_in">next</span>:<br>            <span class="hljs-keyword">if</span> node.val == node.<span class="hljs-built_in">next</span>.val:<br>                node.<span class="hljs-built_in">next</span> = node.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                node = node.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> head<br></code></pre></td></tr></table></figure><p>Runtime：0ms - Beats 100%</p><h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">deleteDuplicates</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* node = head;<br>        <span class="hljs-keyword">while</span> (node &amp;&amp; node-&gt;next) &#123;<br>            <span class="hljs-keyword">if</span> (node-&gt;val == node-&gt;next-&gt;val)<br>                node-&gt;next = node-&gt;next-&gt;next;<br>            <span class="hljs-keyword">else</span><br>                node = node-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Runtime：0ms - Beats 100%</p>]]></content>
    
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>Python</tag>
      
      <tag>C++</tag>
      
      <tag>Linked-List</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/hello-world/"/>
    <url>/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
